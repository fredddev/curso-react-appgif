{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAGRC,mBAAS,IAHD,mBAGrCC,EAHqC,KAGzBC,EAHyB,KAsB5C,OACI,sBAAMC,SAZW,SAACC,GAElBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAO,IAC1BR,GAAc,SAAAS,GAAI,OAAIP,GAAJ,mBAAkBO,OACpCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SArBa,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,a,+BCVlBG,EAAO,uCAAE,WAAOC,GAAP,uBAAAC,EAAA,6DAGZC,EAHY,iDAGqCC,UAAUH,GAH/C,+DAICI,MAAOF,GAJR,cAIZG,EAJY,gBAMGA,EAAKC,OANR,uBAMXC,EANW,EAMXA,KAIDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAdxB,kBAmBXM,GAnBW,4CAAF,sDCGPO,EAAc,SAAC,GAAsB,IAApBJ,EAAmB,EAAnBA,GAAGC,EAAgB,EAAhBA,MAAMV,EAAU,EAAVA,IAEnC,OADAc,QAAQC,IAAIN,EAAGC,EAAMV,GAGjB,cADA,CACA,OAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAKA,QCNJS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECAX,SAAEA,GAAe,IAAD,EACdd,mBAAS,CAC/BqB,KAAK,GACLe,SAAQ,IAH4B,mBACjCC,EADiC,KAC1BC,EAD0B,KAoBxC,OAbAC,qBAAW,WACP1B,EAAQC,GACH0B,MAAK,SAAAC,GACFH,EAAS,CACLjB,KAAKoB,EACLL,SAAQ,SAIrB,CAACtB,IAIGuB,EDlByBK,CAAa5B,GAAjCa,EAFuB,EAE5BN,KAAae,EAFe,EAEfA,QAEpB,OACI,qCACA,oBAAIJ,UAAU,oCAAd,SAAmDlB,IACjDsB,GAAW,mBAAGJ,UAAU,mCAAb,qBACb,qBAAKA,UAAU,YAAf,SAGQL,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEqB3BkB,EAhCM,WAAM,MAEa3C,mBAAS,CAAC,MAFvB,mBAEhB4C,EAFgB,KAEJ7C,EAFI,KASvB,OACI,qCACG,mDAEA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ6C,EAAWrB,KAAI,SAAAT,GAAQ,OAEnB,aADH,CACI,EAAD,CAA0BA,SAAWA,GAAtBA,Y,MClBtC+B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.a2e0a434.chunk.js","sourcesContent":["import React,{ useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n//aca recibo setCategories del componente GifExpertApp \r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    //hook para controlar el valor de inputbox\r\n    const [inputValue, setInputValue] = useState('')\r\n    \r\n    //evento change del inputbox\r\n    const handleInputChange =(e) =>{\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    //evento enter de un form\r\n    const handleSubmit = (e)=>{\r\n        //con  esto inpido que el form quiera recargar la pagina\r\n        e.preventDefault();\r\n\r\n        if ( inputValue.trim().length>2){\r\n            setCategories(cats =>[inputValue,...cats]);\r\n            setInputValue('');\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n//con esto le digo que necesito si o si la funcion setCategories para usar este componente\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs =async( category ) =>{  \r\n    //esto devuelve una promesa \r\n          \r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=tEZEbIbSLYAFKldhyMTvBD42hTfdlcUJ`;\r\n    const resp = await fetch (url);\r\n    //en {data} se esta aplicando desestructuracion\r\n    const {data} = await resp.json();\r\n    \r\n    //en esta funcion recibo img del backend y creo un nuevo objeto, los campos id,tile,medium.url son los nombres de los campos que me interesa que manda el backend\r\n    //url: img.images?.downsized_medium.url     aca con el signo de interrogacion le digo que si existe el campo .url lo muestre , si no no!\r\n    const gifs = data.map(img =>{\r\n        return{                \r\n            id: img.id, \r\n            title: img.title,   \r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    // console.log(gifs);\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\n//no olvidar que aqui recibo los propts del componente padre... en este caso id,title,url aplicando destructuracion\r\nexport const GifGridItem = ( {id,title,url} ) => {\r\n    console.log(id,title,url)\r\n    return (\r\n        // aca uso className en lugar de class porque class es una palabra reservada de javascript\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src={url} alt={title} />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n \r\n    const {data:images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n        <h3 className='animate__animated animate__fadeIn'>{category}</h3>\r\n        { loading && <p className='animate__animated animate__flash'>Loading</p> }\r\n        <div className=\"card-grid\">\r\n            \r\n            {\r\n                images.map( img =>(\r\n                    <GifGridItem key={img.id} {...img} />\r\n                ) )\r\n            }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { getGifs} from '../helpers/getGifs';\r\nimport { useEffect, useState} from 'react'\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setState({\r\n                    data:imgs,\r\n                    loading:false\r\n                });\r\n\r\n            })\r\n    }, [category])\r\n\r\n\r\n\r\n    return state;\r\n}\r\n","import React,{useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nconst GifExpertApp = () => {\r\n    //este es mi hock para un array de strings //setCategories devuelve un callback donde el primer argumento es el valor actual y el segundo es el nuevo como se ve aqui      setCategories(cats =>[...cats,'Hunter']);\r\n    const [categories, setCategories] = useState([' '])\r\n    \r\n    //esta funcion es el click del boton    \r\n    // const handleAdd=()=>{\r\n    //     setCategories(cats =>[...cats,'Hunter']);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n           <h2>FABRICIO BUSCADOR</h2>\r\n           {/* aca estoy enviando la funcion setCategories para que el componente AddCategory pueda agregar categorias y se renderize correctamente */}\r\n           <AddCategory setCategories={ setCategories } />\r\n           <hr />\r\n           \r\n           <ol>\r\n               {\r\n                   categories.map(category =>(\r\n                    //    este es el componente GifGrid que recibe dos argumentos\r\n                       <GifGrid key={ category } category={ category }/>\r\n                   ))\r\n               }\r\n           </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n// GifExpertApp.propTypes = {\r\n\r\n// }\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  \n    <GifExpertApp />\n  ,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}